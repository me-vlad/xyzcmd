
# Here go grammar and closures
# Grammar

# 0 $accept: start $end
# 1 start: rule
# 2 rule: expr
# 3     | expr op rule
# 4 expr: expr_body
# 5     | NOT expr_body
# 6     | "(" rule ")"
# 7 expr_body: ftype "{" ARG "}"
# 8 op: AND
# 9   | OR
# 10 ftype: TYPE
# 11      | PERM
# 12      | OWNER
# 13      | REGEXP
# 131     | LINK_TYPE
#         | LINK_PERM
#         | LINK_OWNER
#         | LINK_REGEXP
#         | LINK_EXISTS
# 14 expr_body: NOT ftype "{" ARG "}"

# Closures

# state 0
#    0 $accept: . start $end
#    NOT         shift, and go to state 1
#    TYPE        shift, and go to state 2
#    PERM        shift, and go to state 3
#    OWNER       shift, and go to state 4
#    REGEXP      shift, and go to state 5
#    LINK_TYPE   shift, and go to state 27
#    LINK_PERM   shift, and go to state 27
#    LINK_OWNER  shift, and go to state 27
#    LINK_REGEXP shift, and go to state 27
#    LINK_EXISTS shift, and go to state 27
#    "("         shift, and go to state 6
#    start       go to state 7
#    rule        go to state 8
#    expr        go to state 9
#    expr_body   go to state 10
#    ftype       go to state 11

# state 1
#    5 expr: NOT . expr_body
#    TYPE    shift, and go to state 2
#    PERM    shift, and go to state 3
#    OWNER   shift, and go to state 4
#    REGEXP  shift, and go to state 5
#    LINK_TYPE   shift, and go to state 27
#    LINK_PERM   shift, and go to state 27
#    LINK_OWNER  shift, and go to state 27
#    LINK_REGEXP shift, and go to state 27
#    LINK_EXISTS shift, and go to state 27
#    expr_body  go to state 12
#    ftype      go to state 23

# state 2
#    10 ftype: TYPE .
#    $default  reduce using rule 10 (ftype)

# state 3
#    11 ftype: PERM .
#    $default  reduce using rule 11 (ftype)

# state 4
#    12 ftype: OWNER .
#    $default  reduce using rule 12 (ftype)

# state 5
#    13 ftype: REGEXP .
#    $default  reduce using rule 13 (ftype)

# state 6
#    6 expr: "(" . rule ")"
#    NOT     shift, and go to state 1
#    TYPE    shift, and go to state 2
#    PERM    shift, and go to state 3
#    OWNER   shift, and go to state 4
#    REGEXP  shift, and go to state 5
#    LINK_TYPE   shift, and go to state 27
#    LINK_PERM   shift, and go to state 27
#    LINK_OWNER  shift, and go to state 27
#    LINK_REGEXP shift, and go to state 27
#    LINK_EXISTS shift, and go to state 27
#    "("     shift, and go to state 6
#    rule       go to state 13
#    expr       go to state 9
#    expr_body  go to state 10
#    ftype      go to state 11

# state 7
#    0 $accept: start . $end
#    $end  shift, and go to state 14

# state 8
#    1 start: rule .
#    $default  reduce using rule 1 (start)

# state 9
#    2 rule: expr .
#    3     | expr . op rule
#    AND  shift, and go to state 15
#    OR   shift, and go to state 16
#    $default  reduce using rule 2 (rule)
#    op  go to state 17

# state 10
#    4 expr: expr_body .
#    $default  reduce using rule 4 (expr)

# state 11
#    7 expr_body: ftype . "{" ARG "}"
#    "{"  shift, and go to state 18

# state 12
#    5 expr: NOT expr_body .
#    $default  reduce using rule 5 (expr)

# state 13
#    6 expr: "(" rule . ")"
#    ")"  shift, and go to state 19

# state 14
#    0 $accept: start $end .
#    $default  accept

# state 15
#    8 op: AND .
#    $default  reduce using rule 8 (op)

# state 16
#    9 op: OR .
#    $default  reduce using rule 9 (op)

#state 17
#    3 rule: expr op . rule
#    NOT     shift, and go to state 1
#    TYPE    shift, and go to state 2
#    PERM    shift, and go to state 3
#    OWNER   shift, and go to state 4
#    REGEXP  shift, and go to state 5
#    LINK_TYPE   shift, and go to state 27
#    LINK_PERM   shift, and go to state 27
#    LINK_OWNER  shift, and go to state 27
#    LINK_REGEXP shift, and go to state 27
#    LINK_EXISTS shift, and go to state 27
#    "("     shift, and go to state 6
#    rule       go to state 20
#    expr       go to state 9
#    expr_body  go to state 10
#    ftype      go to state 11

# state 18
#    7 expr_body: ftype "{" . ARG "}"
#    ARG  shift, and go to state 21

# state 19
#    6 expr: "(" rule ")" .
#    $default  reduce using rule 6 (expr)

# state 20
#    3 rule: expr op rule .
#    $default  reduce using rule 3 (rule)

# state 21
#    7 expr_body: ftype "{" ARG . "}"
#    "}"  shift, and go to state 22

# state 22
#    7 expr_body: ftype "{" ARG "}" .
#    $default  reduce using rule 7 (expr_body)

# state 23
#    7 expr_body: NOT ftype . "{" ARG "}"
#    "{"  shift, and go to state 24

# state 24
#    7 expr_body: NOT ftype "{" . ARG "}"
#    ARG  shift, and go to state 25

# state 25
#    7 expr_body: NOT ftype "{" ARG . "}"
#    "}"  shift, and go to state 26

# state 26
#    7 expr_body: NOT ftype "{" ARG "}" .
#    $default  reduce using rule 14 (expr_body)

# state 27
#    10 ftype: LINK_FTYPE .
#    $default  reduce using rule 131 (ftype)

